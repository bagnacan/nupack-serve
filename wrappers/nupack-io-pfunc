#!/usr/bin/env python3

import io
import os
import pexpect
import sys


LINE      = "line"
FIELD     = "field"
SEPARATOR = "separator"
PFUNC_CALL        = {LINE:  5, FIELD: "call",             SEPARATOR: ": "}
PFUNC_VERSION     = {LINE:  2, FIELD: "version",          SEPARATOR: " "}
PFUNC_SEQUENCE    = {LINE:  6, FIELD: "sequence",         SEPARATOR: " "}
PFUNC_PARTITION   = {LINE: -2, FIELD: "partition",        SEPARATOR: " "}
PFUNC_FREE_ENERGY = {LINE: -3, FIELD: "free_energy",      SEPARATOR: " "}
PFUNC_TEMPERATURE = {LINE: 11, FIELD: "temperature",      SEPARATOR: ": "}
PFUNC_CONCENTR_NA = {LINE: 12, FIELD: "concentration_na", SEPARATOR: ": "}
PFUNC_CONCENTR_MG = {LINE: 13, FIELD: "concentration_mg", SEPARATOR: ": "}



def pfunc2dict(entries):
    result = {
        PFUNC_CALL[FIELD]:
            os.path.basename(
                entries[PFUNC_CALL[LINE]].split(
                    PFUNC_CALL[SEPARATOR]
                )[-1].rstrip()),

        PFUNC_VERSION[FIELD]:
            entries[PFUNC_VERSION[LINE]].split(
                PFUNC_VERSION[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_SEQUENCE[FIELD]:
            entries[PFUNC_SEQUENCE[LINE]].split(
                PFUNC_SEQUENCE[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_PARTITION[FIELD]:
            entries[PFUNC_PARTITION[LINE]].split(
                PFUNC_PARTITION[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_FREE_ENERGY[FIELD]:
            entries[PFUNC_FREE_ENERGY[LINE]].split(
                PFUNC_FREE_ENERGY[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_TEMPERATURE[FIELD]:
            entries[PFUNC_TEMPERATURE[LINE]].split(
                PFUNC_TEMPERATURE[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_CONCENTR_NA[FIELD]:
            entries[PFUNC_CONCENTR_NA[LINE]].split(
                PFUNC_CONCENTR_NA[SEPARATOR]
                )[-1].rstrip(),

        PFUNC_CONCENTR_MG[FIELD]:
            entries[PFUNC_CONCENTR_MG[LINE]].split(
                PFUNC_CONCENTR_MG[SEPARATOR]
                )[-1].rstrip()
    }
    return result



def pfunc(call, sequence):
    with open("/dev/null", "wb") as null:
        log = io.BytesIO()

        p = pexpect.spawn(call, logfile=log)
        p.expect("Enter sequence: ")

        # resume logging while the provided sequence has bee processed
        p.logfile = null
        p.sendline(sequence)
        p.logfile = log

        p.expect("%.*")
        p.expect("%.*")

        # store the entire log
        log.seek(0)
        response = log.read().decode("utf-8").split("\n")

        # close all log streams
        log.close()
        null.close()

        return pfunc2dict(response)



if __name__ == "__main__":
    call     = "pfunc -T 37"
    sequence = "GGGCUGUUUUUCUCGCUGACUUUCAGCCCCAAACAAAAAAUGUCAGCA"
    print(pfunc(call, sequence))
